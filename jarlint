#!/usr/bin/perl -s

use strict;
use vars;
use English;

use Digest::MD5;

$OUTPUT_RECORD_SEPARATOR = "\n";

my(@classpath,%hashes,@nils,%names,%roots,%dupes,$dupes,@newcp,%binary_dupes);

sub hashit($) {
    my($file) = @_;
    my($md5,$hash);
    local(*F);
    $md5 = Digest::MD5->new;
    open(F,$file) || die "Could not open file '$file': $!\n";
    $md5->addfile(*F);
    $hash = $md5->hexdigest();
    close(*F);
    return $hash;
}

sub h($$) {
    my($msg,$char) = @_;
    return $msg . "\n" . $char x length($msg);
}

sub h1($) {
    my ($msg) = @_;
    h($msg,'=');
}

sub h2($) {
    my($msg) = @_;
    h($msg,'-');
}

sub code($) {
    my($c) = @_;
    " " x 4 . $c;
}

sub blank() {
    "";
}

sub getClasspathFromString($) {
    my($str) = @_;
    return split(/:/,$str);
}

sub getClasspathFromFile($) {
    my($cp) = @_;
    my($classpath);
    local(*F);
    open(F,$cp) || die "Couldn't open classpath file '$cp': $!\n";
    while(<F>) {
        last if(($classpath) = /.*CLASSPATH=(.*?)[;\s]/i);
        last if(($classpath) = /"javaClassPath"\s+String\s+"(.*?)"/);
    }
    close(F);
    return getClasspathFromString($classpath);
}

if(@ARGV > 0) {
    my $cp = shift();
    if(-e $cp) {
        @classpath = getClasspathFromFile($cp);
    } else {
        @classpath = getClasspathFromString($cp);
    }
} else {
    @classpath = getClasspathFromString($ENV{'CLASSPATH'});
}       

for my $entry (@classpath) {
    $dupes{$entry}++;
    push(@newcp,$entry);
    if(! -e $entry) {
        push(@nils,$entry);
        pop(@newcp);
    } elsif (-f $entry) {
        if($dupes{$entry} == 1) {
            my $hash = hashit($entry);
            my $root;
            if ($hashes{$hash}) {
                $binary_dupes{$entry}++;
                foreach my $other (@{$hashes{$hash}}) {
                    $binary_dupes{$other}++;
                }
                pop(@newcp);
            }
            push(@{$hashes{$hash}},$entry);
            my ($basename) = $entry =~ m|.*/(.*)|;
            push(@{$names{$basename}}, $entry);
            if($basename =~ /(.*?)[0-9\.]+.(jar|zip)/i) {
                $root = $1;
                $root =~ s/[-\.]$//;
            } else {
                ($root) = $basename =~ /(.*)\.(jar|zip)/i;
            }
            push(@{$roots{$root}},$entry);
        } else { # a dupe file
            $dupes++;
            pop(@newcp);
        }
    } elsif (-d $entry) {
        if($dupes{$entry} > 1) {
            pop(@newcp);
            $dupes++;
        }
    }
}

$_ = ""; # need this so you can just say print (no args) later. 

print;
print;
print h1 "The Low-Hanging Fruit";
print;

if(@nils > 0) {
    print h2 "Nonexistent Files";
    print "The following classpath elements do not exist, and can safely be removed";
    print;
    foreach my $nil (sort(@nils)) {
        print code "$nil";
    }
    print;
}

if($dupes > 0) {
    print h2 "Duplicate Elements";
    print "The following classpath elements appear more than one time -- you can safely prune entries 2+";
    print;
    while(my($k,$v) = each(%dupes)) {
        if($v > 1) {
            print code "$k";
        }
    }
    print;
}

if(%binary_dupes > 0) {
    print h2 "Binary Clones";
    print "The following jar files appear to be binary-identical; you can safely remove instances 2+";
    print;
    foreach my $hash (keys(%hashes)) {
        if(@{$hashes{$hash}} > 1) {
            foreach(@{$hashes{$hash}}) {
                print code "$_";
            }
            print;
        }
    }
}

print;
print h2 "Safe new classpath";
my $count = @nils + $dupes;
my $pct = ($count / @classpath) * 100;
printf "You can trim at least %d elements from your classpath right off the bat, a %0.0f%% reduction in its length. You can pretty safely try this:\n", $count, $pct;
print;
print code "CLASSPATH=" . join(':', @newcp);

print;
print;
print h1 "The Hard Part";
print;

{ 
    my(@jars);
    foreach my $name (sort(keys(%names))) {
        my @list = @{$names{$name}}; 
        if(@list > 1) {
            foreach(@list) {
                push(@jars,$_) unless($binary_dupes{$_});
            }
        }
    }
    if(@jars > 0) {
        print h2 "Same Name, Different Files";
        print "The following jars exist in more than one directory, and are binary-different. This is bad, and requires manual sleuthing.";
        print;
        foreach (@jars) {
            print code $_;
        }
        print;
    }
}

{ 
    my(@jars);
    foreach my $root (sort(keys(%roots))) {
        my @list = @{$roots{$root}};
        if(@list > 1 && grep(/\d\.\d/,@list) > 0) {
            foreach (@list) {
                push(@jars,$_);
            }
        }
    }

    if(@jars > 0) {
        print h2 "Different Versions of the Same Jar";
        print "The following jars look like they're different versions of the same package. This is a little sketchy, and is probably worth checking out.";
        print;
        foreach(@jars) {
            print code "$_";
        }
        print;
    }
}
